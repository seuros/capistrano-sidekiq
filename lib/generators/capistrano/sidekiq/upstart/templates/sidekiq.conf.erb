# /etc/init/sidekiq.conf - Sidekiq config | https://github.com/mperham/sidekiq/blob/master/examples/upstart/sidekiq.conf

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Sidekiq instances with
# Upstart, Ubuntu's native service management tool.
#
# See workers.conf for how to manage all Sidekiq instances at once.
#
# Save this config as /etc/init/sidekiq.conf then manage sidekiq with:
#   sudo start <%= fetch(:sidekiq_service_unit_name) %> index=0
#   sudo stop <%= fetch(:sidekiq_service_unit_name) %> index=0
#   sudo status <%= fetch(:sidekiq_service_unit_name) %> index=0
#
# Hack Upstart's reload command to 'quiet' Sidekiq:
#
#   sudo reload <%= fetch(:sidekiq_service_unit_name) %> index=0
#
# or use the service command:
#   sudo service <%= fetch(:sidekiq_service_unit_name) %> {start,stop,restart,status}
#

description "Sidekiq for <%= "#{fetch(:application)} (#{fetch(:stage)})" %>"

# This script is not meant to start on bootup, workers.conf
# will start all sidekiq instances explicitly when it starts.
#start on runlevel [2345]
#stop on runlevel [06]
<% if sidekiq_user %>

# change to match your deployment user
setuid <%= sidekiq_user %>
setgid <%= sidekiq_user %>
env HOME=/home/<%= sidekiq_user %>
<% end %>

# Greatly reduce Ruby memory fragmentation and heap usage
# https://www.mikeperham.com/2018/04/25/taming-rails-memory-bloat/
env MALLOC_ARENA_MAX=2

respawn
respawn limit 3 30

# TERM is used when stopping sidekiq. Without declaring these as
# normal exit codes, it just respawns.
normal exit 0 TERM

# Older versions of Upstart might not support the reload command and need
# this commented out.
reload signal TSTP

# Upstart waits 5 seconds by default to kill a process. Increase timeout to
# give sidekiq process enough time to exit.
kill timeout 30
<% if num_workers %>

instance $index
<% end %>
script
# this script runs in /bin/sh by default
# respawn as bash so we can source in rbenv
exec /bin/bash <<'EOT'
  # Pick your poison :) Or none if you're using a system wide installed Ruby.
  # rbenv
  # source /home/apps/.bash_profile
  # OR
  # source /home/apps/.profile
  # OR system:
  # source /etc/profile.d/rbenv.sh
  #
  # rvm
  # source /home/apps/.rvm/scripts/rvm

  # Logs out to /var/log/upstart/<%= fetch(:sidekiq_service_unit_name) %>.log by default

  cd <%= File.join(fetch(:deploy_to), 'current') %>
  exec <%= SSHKit.config.command_map[:bundle] %> exec sidekiq -e <%= fetch(:sidekiq_env) %> <%= sidekiq_config %> <%= sidekiq_concurrency %> <%= sidekiq_queues %>
EOT
end script